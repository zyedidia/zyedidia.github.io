<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zachary Yedidia&#39;s blog</title>
    <link>https://zyedidia.github.io/blog/</link>
    <description>Recent content on Zachary Yedidia&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://zyedidia.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Visualizing the ARM64 Instruction Set</title>
      <link>https://zyedidia.github.io/blog/posts/6-arm64/</link>
      <pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://zyedidia.github.io/blog/posts/6-arm64/</guid>
      <description>Introduction Lately I&amp;rsquo;ve been doing a lot of work with the ARM64 instruction set, and I thought it would be fun to try to visualize it. ARM64 encodes every instruction as a 32-bit integer, so one way to visualize the instruction set is by plotting the instructions along a space-filling curve, such as a Hilbert curve1, and coloring them according to their instruction class (i.e., general, advsimd, float, sve, etc&amp;hellip;).</description>
    </item>
    
    <item>
      <title>Unsafe transmute implemented in Safe Rust</title>
      <link>https://zyedidia.github.io/blog/posts/5-safe-transmute/</link>
      <pubDate>Mon, 15 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zyedidia.github.io/blog/posts/5-safe-transmute/</guid>
      <description>I came across this issue on the Rust issue tracker recently: https://github.com/rust-lang/rust/issues/57893.
One of the GitHub comments shows how you can abuse this bug to write a transmute1 function without the use of unsafe (and then you can obviously use this to cause undefined behavior in Safe Rust programs).
trait Object&amp;lt;U&amp;gt; { type Output; } impl&amp;lt;T: ?Sized, U&amp;gt; Object&amp;lt;U&amp;gt; for T { type Output = U; } fn transmute_obj&amp;lt;T: ?Sized, U&amp;gt;(x: &amp;lt;T as Object&amp;lt;U&amp;gt;&amp;gt;::Output) -&amp;gt; U { x } fn transmute&amp;lt;T, U&amp;gt;(x: T) -&amp;gt; U { transmute_obj::&amp;lt;dyn Object&amp;lt;U, Output = T&amp;gt;, U&amp;gt;(x) } fn main() { // make a null pointer let p = core::ptr::null_mut(); // &amp;#34;safely&amp;#34; transmute it into a reference let x = transmute::&amp;lt;*mut i64, &amp;amp;&amp;#39;static i64&amp;gt;(p); // access the reference println!</description>
    </item>
    
    <item>
      <title>Incremental D Compilation with Knit</title>
      <link>https://zyedidia.github.io/blog/posts/4-incremental-d-knit/</link>
      <pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zyedidia.github.io/blog/posts/4-incremental-d-knit/</guid>
      <description>A new feature in Knit I&amp;rsquo;ve been writing a build tool called Knit (I&amp;rsquo;ve written a blog post about it here). In Knit v1.1.0 there is a new feature I&amp;rsquo;m calling &amp;ldquo;dynamic task elision&amp;rdquo;, which allows Knit to skip a build step if, at the time when it tries to run the task, it can determine that out-of-date prerequisites that got rebuilt ended up not changing anything. This is possible thanks to Knit&amp;rsquo;s support for hash-based file modification detection (and is not possible if this feature is disabled).</description>
    </item>
    
    <item>
      <title>Knit: making a better Make</title>
      <link>https://zyedidia.github.io/blog/posts/3-knit-better-make/</link>
      <pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zyedidia.github.io/blog/posts/3-knit-better-make/</guid>
      <description>This article is about a new build tool I&amp;rsquo;ve been working on called Knit. Check it out on GitHub!
What&amp;rsquo;s wrong with Make? This might be surprising but I actually like Make overall. It has a concise syntax for declaring dependencies, and it doesn&amp;rsquo;t make any assumptions about the programs I am building. These are the two biggest factors I consider when looking for a replacement, and so far I haven&amp;rsquo;t found any build systems that manage to keep Make&amp;rsquo;s core simplicity while improving on it1 2 3.</description>
    </item>
    
    <item>
      <title>Bare-metal development on the VisionFive 2 with D</title>
      <link>https://zyedidia.github.io/blog/posts/2-baremetal-visionfive/</link>
      <pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zyedidia.github.io/blog/posts/2-baremetal-visionfive/</guid>
      <description>This is a follow-up to my previous post about writing bare-metal RISC-V programs using D. This time we&amp;rsquo;ll get our code running on actual hardware. We&amp;rsquo;ll be using the VisionFive 2 board, a recently released RISC-V SBC with 4 application cores (SiFive U74) clocked at a maximum of 1.5 GHz1 and 1 monitor core (SiFive S7). The main difference between the U74 cores and the S7 core is that the S7 core does not have an MMU, and therefore cannot support virtual memory &amp;ndash; but that won&amp;rsquo;t be relevant to us today.</description>
    </item>
    
    <item>
      <title>Writing a bare-metal RISC-V application in D</title>
      <link>https://zyedidia.github.io/blog/posts/1-d-baremetal/</link>
      <pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zyedidia.github.io/blog/posts/1-d-baremetal/</guid>
      <description>This post will show you how to use D to write a bare-metal &amp;ldquo;Hello world&amp;rdquo; program that targets the RISC-V QEMU simulator. In a future blog post (now available) we&amp;rsquo;ll build on this to target actual hardware: the VisionFive 2 SBC. See blog-code for the final code from this post. For a more complex example, see Multiplix, an operating system I am developing that runs on the VisionFive 2 (and Raspberry Pis).</description>
    </item>
    
    <item>
      <title>Starting a blog</title>
      <link>https://zyedidia.github.io/blog/posts/0-starting-a-blog/</link>
      <pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zyedidia.github.io/blog/posts/0-starting-a-blog/</guid>
      <description>Hi there! I&amp;rsquo;ve set up a blog. I&amp;rsquo;ll probably write about things I&amp;rsquo;m working on or find interesting. Lately that includes things such as OS development, the D programming language, symbolic execution, hardware design and verification (with Chisel), build systems, text editors, and more. Stay tuned!</description>
    </item>
    
  </channel>
</rss>
