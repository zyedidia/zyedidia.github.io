<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>osdev on Zachary Yedidia&#39;s blog</title>
    <link>https://zyedidia.github.io/blog/categories/osdev/</link>
    <description>Recent content in osdev on Zachary Yedidia&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://zyedidia.github.io/blog/categories/osdev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bare-metal development on the VisionFive 2 with D</title>
      <link>https://zyedidia.github.io/blog/posts/2-baremetal-visionfive/</link>
      <pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zyedidia.github.io/blog/posts/2-baremetal-visionfive/</guid>
      <description>This is a follow-up to my previous post about writing bare-metal RISC-V programs using D. This time we&amp;rsquo;ll get our code running on actual hardware. We&amp;rsquo;ll be using the VisionFive 2 board, a recently released RISC-V SBC with 4 U74 performance cores (SiFive U74) clocked at 1.5 GHz and 1 monitor core (SiFive S7). The main difference between the U74 cores and the S7 core is that the S7 core does not have an MMU, and therefore cannot support virtual memory &amp;ndash; but that won&amp;rsquo;t be relevant to us today.</description>
    </item>
    
    <item>
      <title>Writing a bare-metal RISC-V application in D</title>
      <link>https://zyedidia.github.io/blog/posts/1-d-baremetal/</link>
      <pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zyedidia.github.io/blog/posts/1-d-baremetal/</guid>
      <description>This post will show you how to use D to write a bare-metal &amp;ldquo;Hello world&amp;rdquo; program that targets the RISC-V QEMU simulator. In a future blog post (now available) we&amp;rsquo;ll build on this to target actual hardware: the VisionFive 2 SBC. See blog-code for the final code from this post.
Why D? Recently I&amp;rsquo;ve been writing bare-metal code in C, and I&amp;rsquo;ve become a bit frustrated with the lack of features that C provides.</description>
    </item>
    
  </channel>
</rss>
